// ========================================
// API CLIENT
// ========================================

class ApiClient {
  constructor() {
    this.baseUrl = 'http://localhost:8060';
    this.categoryApiUrl = 'http://localhost:8000'; // API ri√™ng cho categories v√† s·∫£n ph·∫©m theo category
    this.timeout = 8000;
    this.maxRetries = 2;
  }

  // Generic API call with retry
  async apiCall(url, options = {}, retries = this.maxRetries) {
    console.log('üîó API Call starting:', url);
    
    for (let i = 0; i <= retries; i++) {
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);
        
        console.log(`üì° Attempt ${i + 1}/${retries + 1} for: ${url}`);
        
        const response = await fetch(url, {
          ...options,
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        console.log('üìä Response status:', response.status, response.statusText);
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ API Response received:', data);
        console.log('üìã Response structure:', {
          hasData: !!data.data,
          hasResult: !!data.result,
          isArray: Array.isArray(data),
          keys: Object.keys(data)
        });
        
        return data;
        
      } catch (error) {
        window.UtilHelpers.logWithTime(`API attempt ${i + 1} failed: ${error.message}`, 'warn');
        
        if (i < retries) {
          await window.UtilHelpers.delay((i + 1) * 1000);
        } else {
          throw error;
        }
      }
    }
  }

  // Test API availability
  async testApiAvailability(baseUrl = this.baseUrl) {
    try {
      const response = await Promise.race([
        fetch(`${baseUrl}/products`, { method: 'HEAD' }),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout')), 2000)
        )
      ]);
      return response.ok;
    } catch {
      return false;
    }
  }

  // Get products from API - L·∫•y s·∫£n ph·∫©m t·ª´ API theo categoryId
  async getProducts(categoryId = null) {
    let url;
    
    if (categoryId) {
      // S·ª≠ d·ª•ng API chuy√™n bi·ªát cho s·∫£n ph·∫©m theo category
      url = `${this.categoryApiUrl}/product/products/category/${categoryId}`;
    } else {
      // T·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ API ch√≠nh
      url = `${this.baseUrl}/products`;
    }
    
    console.log(`üîó Fetching products from: ${url}`);
    console.log(`üìã CategoryId: ${categoryId}`);
    
    try {
      const data = await this.apiCall(url);
      
      console.log('üéØ Raw API data:', data);
      console.log('üîç Data type:', typeof data);
      console.log('üîç Data is array?', Array.isArray(data));
      console.log('üîç Data keys:', data ? Object.keys(data) : 'null/undefined');
      
      // Th·ª≠ c√°c c√°ch parse kh√°c nhau - ∆∞u ti√™n productList/productlist tr∆∞·ªõc
      let products = [];
      
      // 1. Ki·ªÉm tra result.productList (API c10 tr·∫£ v·ªÅ result.productList v·ªõi 4 s·∫£n ph·∫©m)
      if (data.result && data.result.productList && Array.isArray(data.result.productList)) {
        products = data.result.productList;
        console.log('‚úÖ Using data.result.productList array:', products.length);
      }
      // 2. Ki·ªÉm tra data.productList (vi·∫øt hoa)
      else if (data.productList && Array.isArray(data.productList)) {
        products = data.productList;
        console.log('‚úÖ Using data.productList array:', products.length);
      }
      // 3. Ki·ªÉm tra data.productlist (vi·∫øt th∆∞·ªùng)
      else if (data.productlist && Array.isArray(data.productlist)) {
        products = data.productlist;
        console.log('‚úÖ Using data.productlist array:', products.length);
      }
      // 4. Ki·ªÉm tra n·∫øu response l√† array tr·ª±c ti·∫øp
      else if (Array.isArray(data)) {
        products = data;
        console.log('‚úÖ Using direct array:', products.length);
      } 
      // 5. Ki·ªÉm tra data.data
      else if (data.data && Array.isArray(data.data)) {
        products = data.data;
        console.log('‚úÖ Using data.data array:', products.length);
      } 
      // 6. Ki·ªÉm tra data.result n·∫øu l√† array
      else if (data.result && Array.isArray(data.result)) {
        products = data.result;
        console.log('‚úÖ Using data.result array:', products.length);
      } 
      // 7. Ki·ªÉm tra data.products
      else if (data.products && Array.isArray(data.products)) {
        products = data.products;
        console.log('‚úÖ Using data.products array:', products.length);
      } 
      // 6. Ki·ªÉm tra n·∫øu data l√† object c√≥ properties nh∆∞ products
      else if (data && typeof data === 'object') {
        // T√¨m property ƒë·∫ßu ti√™n l√† array
        const arrayKey = Object.keys(data).find(key => Array.isArray(data[key]));
        if (arrayKey) {
          products = data[arrayKey];
          console.log(`‚úÖ Using data.${arrayKey} array:`, products.length);
        } else {
          console.warn('‚ö†Ô∏è No array property found in object');
          console.log('üîç Full object structure:', JSON.stringify(data, null, 2));
          products = [];
        }
      }
      // 7. Fallback - kh√¥ng t√¨m th·∫•y g√¨
      else {
        console.warn('‚ö†Ô∏è No valid product array found in response');
        console.log('üîç Full response data:', JSON.stringify(data, null, 2));
        products = [];
      }
      
      console.log(`üì¶ Final parsed products count: ${products.length}`);
      
      // N·∫øu productlist r·ªóng, tr·∫£ v·ªÅ m·∫£ng r·ªóng
      if (products.length === 0) {
        console.log('üì≠ No products found for category:', categoryId);
        return [];
      }
      
      if (products.length > 0) {
        console.log('üìä Sample product structure:', products[0]);
        console.log('üîç Products with children:', products.filter(p => p.children && p.children.length > 0));
        
        // X·ª≠ l√Ω Google Drive images cho t·∫•t c·∫£ s·∫£n ph·∫©m
        products = await this.processAllProductImages(products);
      }
      
      window.UtilHelpers.logWithTime(`Loaded ${products.length} products from API`);
      return products;
      
    } catch (error) {
      console.error('‚ùå getProducts error:', error);
      window.UtilHelpers.logWithTime(`Products API failed: ${error.message}`, 'error');
      return [];
    }
  }

  // Get categories - L·∫•y danh m·ª•c t·ª´ API - kh√¥ng s·ª≠ d·ª•ng fallback
  async getCategories() {
    try {
      const data = await this.apiCall(`${this.categoryApiUrl}/product/categories/tree`);
      
      // Parse categories t·ª´ response
      let categories = [];
      if (Array.isArray(data.result)) {
        categories = data.result;
      } else if (Array.isArray(data.data)) {
        categories = data.data;
      } else if (Array.isArray(data)) {
        categories = data;
      }
      
      console.log(`üìä ApiClient loaded ${categories.length} categories`);
      return categories;
      
    } catch (error) {
      console.error(`‚ùå Categories API failed: ${error.message}`);
      // Kh√¥ng tr·∫£ v·ªÅ fallback ƒë·ªÉ tr√°nh hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u
      return [];
    }
  }

  // Get subcategories - L·∫•y danh m·ª•c con theo parent ID
  async getSubcategories(parentId) {
    try {
      const data = await this.apiCall(`${this.categoryApiUrl}/product/categories/tree`);
      const categories = data.data || data.result || data || [];
      
      // T√¨m danh m·ª•c cha v√† tr·∫£ v·ªÅ children
      const parentCategory = categories.find(cat => cat.id === parentId);
      return parentCategory?.children || [];
      
    } catch (error) {
      window.UtilHelpers.logWithTime(`Subcategories API failed: ${error.message}`, 'warn');
      return [];
    }
  }

  // getProductDetail: L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID - API t·ªïng qu√°t
  async getProductDetail(productId) {
    if (!productId) {
      throw new Error('Product ID is required');
    }

    // Th·ª≠ nhi·ªÅu API endpoints kh√°c nhau
    const possibleUrls = [
      `${this.baseUrl}/products/${productId}`,           // API ch√≠nh
      `${this.categoryApiUrl}/product/products/${productId}`, // API category
      `http://localhost:8080/products/${productId}`,     // API backup t·ª´ Postman
    ];

    console.log(`ÔøΩ Trying to fetch product detail for ID: ${productId}`);
    
    for (const url of possibleUrls) {
      try {
        console.log(`üì° Attempting: ${url}`);
        const data = await this.apiCall(url);
        
        console.log('üéØ Product detail raw data:', data);
        
        // Parse response data linh ho·∫°t
        let product = null;
        
        if (data.data) {
          product = data.data;
          console.log('‚úÖ Found product in data.data');
        } else if (data.result) {
          product = data.result;
          console.log('‚úÖ Found product in data.result');
        } else if (data.id) {
          // Tr∆∞·ªùng h·ª£p s·∫£n ph·∫©m tr·∫£ v·ªÅ tr·ª±c ti·∫øp
          product = data;
          console.log('‚úÖ Found product as direct response');
        }
        
        if (product && product.id) {
          console.log(`‚úÖ Product detail loaded successfully from: ${url}`);
          
          // T·ª± ƒë·ªông x·ª≠ l√Ω ·∫£nh c·ªßa s·∫£n ph·∫©m
          const processedProduct = await this.processProductImages(product);
          return processedProduct;
        } else {
          console.warn(`‚ö†Ô∏è Product not found in response from: ${url}`);
        }
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è Failed to fetch from ${url}: ${error.message}`);
        // Ti·∫øp t·ª•c v·ªõi URL ti·∫øp theo
      }
    }
    
    // N·∫øu t·∫•t c·∫£ URLs ƒë·ªÅu th·∫•t b·∫°i
    throw new Error(`Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt s·∫£n ph·∫©m t·ª´ b·∫•t k·ª≥ API n√†o. ID: ${productId}`);
  }

  // getOptimizedImageUrl: L·∫•y URL ·∫£nh t·ªëi ∆∞u t·ª´ nhi·ªÅu ngu·ªìn (deprecated - use GoogleDriveImageHelper)
  async getOptimizedImageUrl(imageSource) {
    console.log('üîç Processing image source (deprecated method):', imageSource);
    
    // S·ª≠ d·ª•ng GoogleDriveImageHelper n·∫øu c√≥
    if (window.GoogleDriveImageHelper) {
      return window.GoogleDriveImageHelper.processGoogleDriveImage(imageSource, {
        fallback: './public/images/cart_logo.png'
      });
    }
    
    // Fallback x·ª≠ l√Ω c≈©
    console.log('‚ö†Ô∏è Using deprecated image processing - consider using GoogleDriveImageHelper');
    
    // N·∫øu l√† Google Drive ID
    if (imageSource && !imageSource.startsWith('http') && imageSource.length > 10) {
      console.log('üîç Detected Google Drive ID:', imageSource);
      const driveUrl = `https://drive.google.com/uc?id=${imageSource}&export=view`;
      console.log('‚úÖ Created Google Drive direct URL:', driveUrl);
      return driveUrl;
    }
    
    // N·∫øu l√† Google Drive sharing URL
    if (imageSource && imageSource.includes('drive.google.com/file/d/')) {
      const fileIdMatch = imageSource.match(/\/file\/d\/([a-zA-Z0-9-_]+)/);
      if (fileIdMatch) {
        const fileId = fileIdMatch[1];
        const driveUrl = `https://drive.google.com/uc?id=${fileId}&export=view`;
        console.log('‚úÖ Converted sharing URL to direct URL:', driveUrl);
        return driveUrl;
      }
    }
    
    // N·∫øu ƒë√£ l√† Google Drive uc URL, th√™m export=view n·∫øu ch∆∞a c√≥
    if (imageSource && imageSource.includes('drive.google.com/uc?id=')) {
      if (!imageSource.includes('export=view')) {
        const enhancedUrl = imageSource + '&export=view';
        console.log('‚úÖ Enhanced Google Drive URL:', enhancedUrl);
        return enhancedUrl;
      }
    }
    
    // Return as-is for regular URLs
    console.log('‚ÑπÔ∏è Using original URL:', imageSource);
    return imageSource || './public/images/cart_logo.png';
  }

  // processProductImages: X·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh c·ªßa s·∫£n ph·∫©m
  async processProductImages(product) {
    if (!product) return product;
    
    console.log('üñºÔ∏è Processing images for product:', product.id || product.name);
    
    // S·ª≠ d·ª•ng GoogleDriveImageHelper n·∫øu c√≥
    if (window.GoogleDriveImageHelper) {
      // X·ª≠ l√Ω ·∫£nh ch√≠nh
      if (product.imageUrl || product.image || product.googleDriveId) {
        const mainImageSource = product.imageUrl || product.image || product.googleDriveId;
        product.optimizedImageUrl = window.GoogleDriveImageHelper.processGoogleDriveImage(mainImageSource);
        console.log('‚úÖ Processed main image:', product.optimizedImageUrl);
      }
      
      // X·ª≠ l√Ω m·∫£ng ·∫£nh n·∫øu c√≥
      if (product.images && Array.isArray(product.images)) {
        product.optimizedImages = window.GoogleDriveImageHelper.batchProcessImages(product.images);
        console.log('‚úÖ Processed image array:', product.optimizedImages);
      }
      
      // X·ª≠ l√Ω variant images n·∫øu c√≥
      if (product.variant && Array.isArray(product.variant)) {
        product.variant.forEach((variant, index) => {
          if (variant.image || variant.imageUrl) {
            const variantImageSource = variant.image || variant.imageUrl;
            variant.optimizedImageUrl = window.GoogleDriveImageHelper.processGoogleDriveImage(variantImageSource);
            console.log(`‚úÖ Processed variant ${index} image:`, variant.optimizedImageUrl);
          }
        });
      }
    }
    
    return product;
  }

  // processAllProductImages: X·ª≠ l√Ω Google Drive images cho t·∫•t c·∫£ s·∫£n ph·∫©m
  async processAllProductImages(products) {
    if (!Array.isArray(products)) {
      console.warn('‚ö†Ô∏è Products must be an array');
      return products;
    }

    console.log('üñºÔ∏è Processing Google Drive images for all products...');
    
    const processedProducts = await Promise.all(
      products.map(async (product) => {
        try {
          return await this.processProductImages(product);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Failed to process images for product ${product.id}:`, error.message);
          return product; // Tr·∫£ v·ªÅ s·∫£n ph·∫©m g·ªëc n·∫øu l·ªói
        }
      })
    );

    console.log('‚úÖ Completed processing images for all products');
    return processedProducts;
  }
}

// Create global instance
window.apiClient = new ApiClient();
