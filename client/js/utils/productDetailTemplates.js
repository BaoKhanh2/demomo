// ========================================
// PRODUCT DETAIL TEMPLATES - HTML Templates
// ========================================

class ProductDetailTemplates {
  
  // createProductImage: T·∫°o ph·∫ßn h√¨nh ·∫£nh s·∫£n ph·∫©m
  static createProductImage(product, getProductImageFn) {
    const mainImage = getProductImageFn(product);
    let images = product.images || [mainImage];
    
    // X·ª≠ l√Ω t·∫•t c·∫£ images qua helper function
    images = images.map(img => {
      if (typeof img === 'string' && img !== mainImage) {
        return getProductImageFn({ imageUrl: img });
      }
      return img;
    });
    
    console.log('üñºÔ∏è Processed images:', { mainImage, images });
    
    return `
      <div class="product-images">
        <div class="main-image-container">
          <img id="mainProductImage" 
               src="${mainImage}" 
               alt="${product.name || 'S·∫£n ph·∫©m'}"
               class="main-product-image"
               onerror="console.log('‚ùå Main image failed:', this.src); this.src='./public/images/cart_logo.png'"
               onload="console.log('‚úÖ Main image loaded:', this.src)"
          />
        </div>
        <div class="image-thumbnails">
          ${images.slice(0, 4).map((img, index) => `
            <div class="thumbnail ${index === 0 ? 'active' : ''}" 
                 onclick="window.productDetailManager.changeMainImage('${img}', this)">
              <img src="${img}" 
                   alt="Thumbnail ${index + 1}"
                   onerror="console.log('‚ùå Thumbnail failed:', this.src); this.src='./public/images/cart_logo.png'"
                   onload="console.log('‚úÖ Thumbnail loaded:', this.src)" />
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }

  // createProductHeader: T·∫°o header s·∫£n ph·∫©m
  static createProductHeader(product, formatPriceFn) {
    return `
      <div class="product-header">
        <h1 class="product-title">${product.name || 'T√™n s·∫£n ph·∫©m kh√¥ng c√≥'}</h1>
        
        <div class="product-meta">
          <span class="meta-badge id">ID: ${product.id || 'N/A'}</span>
          
          ${product.price ? `
            <span class="meta-badge price">Gi√°: ${formatPriceFn(product.price)}</span>
          ` : ''}
          
          ${product.brand ? `
            <span class="meta-badge brand">Th∆∞∆°ng hi·ªáu: ${product.brand}</span>
          ` : ''}
          
          ${product.categoryId ? `
            <span class="meta-badge category">Danh m·ª•c: ${product.categoryId}</span>
          ` : ''}

          ${product.status ? `
            <span class="meta-badge status">${product.status}</span>
          ` : ''}
        </div>
      </div>
    `;
  }

  // createProductDescription: T·∫°o m√¥ t·∫£ s·∫£n ph·∫©m
  static createProductDescription(product) {
    return `
      <div class="product-description">
        <h3 class="section-title">M√¥ t·∫£ s·∫£n ph·∫©m</h3>
        <p class="description-text">${product.description || 'Ch∆∞a c√≥ m√¥ t·∫£ cho s·∫£n ph·∫©m n√†y.'}</p>
      </div>
    `;
  }

  // createProductSpecifications: T·∫°o b·∫£ng th√¥ng s·ªë
  static createProductSpecifications(product) {
    const specs = [
      { label: 'M√£ s·∫£n ph·∫©m', value: product.id },
      { label: 'T√™n s·∫£n ph·∫©m', value: product.name },
      { label: 'Th∆∞∆°ng hi·ªáu', value: product.brand },
      { label: 'Danh m·ª•c ID', value: product.categoryId },
      { label: 'H√¨nh ·∫£nh ch√≠nh', value: product.imageUrl },
      { label: 'S·ªë l∆∞·ª£ng variant', value: product.variant ? `${product.variant.length} phi√™n b·∫£n` : '0' },
      { label: 'Tr·∫°ng th√°i', value: product.status || 'C√≥ s·∫µn' }
    ].filter(spec => spec.value && spec.value !== 'N/A');

    if (specs.length === 0) return '';

    return `
      <div class="product-specifications">
        <h3 class="section-title">Th√¥ng s·ªë k·ªπ thu·∫≠t</h3>
        <div class="specs-table">
          ${specs.map((spec, index) => `
            <div class="spec-row">
              <div class="spec-label">${spec.label}</div>
              <div class="spec-value">${spec.value}</div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }

  // createVariantSelector: T·∫°o selector variant
  static createVariantSelector(product) {
    const variants = product.variant || product.variants || [];
    console.log('üéØ createVariantSelector debug:', {
      productVariant: product.variant,
      productVariants: product.variants,
      variants: variants,
      variantsLength: variants.length
    });
    
    if (!variants || variants.length === 0) {
      console.log('‚ö†Ô∏è No variants found, showing fallback message');
      return `
        <div class="variant-selector">
          <h3 class="section-title">Phi√™n b·∫£n s·∫£n ph·∫©m</h3>
          <div class="no-variants-message" style="
            padding: 16px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #ffc107;
            color: #856404;
          ">
            <i class="fas fa-info-circle" style="margin-right: 8px;"></i>
            S·∫£n ph·∫©m n√†y ch·ªâ c√≥ m·ªôt phi√™n b·∫£n duy nh·∫•t.
          </div>
        </div>
      `;
    }

    // T·∫°o danh s√°ch unique attributes
    const attributeGroups = {};
    variants.forEach((variant, variantIndex) => {
      if (variant.attributes) {
        variant.attributes.forEach(attr => {
          if (!attributeGroups[attr.attribute]) {
            attributeGroups[attr.attribute] = new Set();
          }
          attributeGroups[attr.attribute].add(JSON.stringify({
            value: attr.value,
            variantIndex: variantIndex,
            price: variant.price,
            quantity: variant.quantity,
            variantId: variant.id
          }));
        });
      }
    });

    console.log('üîç Attribute groups created:', attributeGroups);
    console.log('üîç Attribute groups keys:', Object.keys(attributeGroups));

    if (Object.keys(attributeGroups).length === 0) {
      console.log('‚ö†Ô∏è No attribute groups found, returning empty string');
      return '';
    }

    return `
      <div class="variant-selector">
        <h3 class="section-title">Ch·ªçn phi√™n b·∫£n</h3>
        
        ${Object.entries(attributeGroups).map(([attributeName, values]) => {
          const valueArray = Array.from(values).map(v => JSON.parse(v));
          
          return `
            <div class="attribute-group">
              <label class="attribute-label">${attributeName}:</label>
              
              <div class="attribute-options">
                ${valueArray.map((option, index) => `
                  <button 
                    class="variant-option ${index === 0 ? 'selected' : ''}" 
                    data-attribute="${attributeName}"
                    data-value="${option.value}"
                    data-variant-index="${option.variantIndex}"
                    data-variant-id="${option.variantId}"
                    data-price="${option.price}"
                    data-quantity="${option.quantity}"
                    onclick="window.productDetailManager.selectVariantOption(this)"
                  >
                    ${option.value}
                    ${option.quantity <= 0 ? '<span class="out-of-stock">H·∫øt h√†ng</span>' : ''}
                  </button>
                `).join('')}
              </div>
            </div>
          `;
        }).join('')}
        
        <div id="selectedVariantInfo" class="selected-variant-info">
          <div class="selected-variant-title">Phi√™n b·∫£n ƒë√£ ch·ªçn:</div>
          <div id="selectedVariantDetails">
            <span style="color: #666;">Vui l√≤ng ch·ªçn c√°c t√πy ch·ªçn above</span>
          </div>
        </div>
      </div>
    `;
  }

  // createActionButtons: T·∫°o c√°c n√∫t h√†nh ƒë·ªông
  static createActionButtons() {
    return `
      <div class="product-actions">
        <button id="addToCartBtn" class="btn-primary">
          <i class="fas fa-cart-plus"></i>
          Th√™m v√†o gi·ªè h√†ng
        </button>
        
        <button id="backBtn" class="btn-secondary">
          <i class="fas fa-arrow-left"></i>
          Quay l·∫°i
        </button>
      </div>
    `;
  }

  // createVariantsSection: T·∫°o ph·∫ßn chi ti·∫øt variants
  static createVariantsSection(product, formatPriceFn) {
    const variants = product.variant || product.variants || [];
    if (!variants || variants.length === 0) return '';

    return `
      <div class="product-variants">
        <h3 class="section-title">Phi√™n b·∫£n s·∫£n ph·∫©m (${variants.length})</h3>
        <div class="variants-grid">
          ${variants.map((variant, index) => `
            <div class="variant-card">
              <h4 class="variant-card-title">Phi√™n b·∫£n ${index + 1}</h4>
              
              <div class="variant-card-price">
                ${variant.price ? formatPriceFn(variant.price) : 'Li√™n h·ªá'}
              </div>
              
              <div class="variant-card-info">
                SKU: <strong>${variant.skuCode || 'N/A'}</strong>
              </div>
              
              <div class="variant-card-info">
                T·ªìn kho: <strong class="variant-card-stock ${variant.quantity > 0 ? 'in-stock' : 'out-of-stock'}">
                  ${variant.quantity || 0}
                </strong>
              </div>
              
              ${variant.attributes && variant.attributes.length > 0 ? `
                <div class="variant-attributes">
                  <div class="variant-attributes-title">Thu·ªôc t√≠nh:</div>
                  <div class="variant-attributes-list">
                    ${variant.attributes.map(attr => `
                      <span class="variant-attribute-tag">${attr.attribute}: ${attr.value}</span>
                    `).join('')}
                  </div>
                </div>
              ` : ''}
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }

  // createLoadingState: T·∫°o tr·∫°ng th√°i loading
  static createLoadingState() {
    return `
      <div class="loading-container">
        <div class="loading-spinner"></div>
        <p style="margin: 0; font-size: 1.1rem;">ƒêang t·∫£i chi ti·∫øt s·∫£n ph·∫©m...</p>
        <p style="margin: 8px 0 0 0; font-size: 0.9rem; color: #999;">
          ƒêang th·ª≠ k·∫øt n·ªëi ƒë·∫øn c√°c API kh√°c nhau...
        </p>
      </div>
    `;
  }

  // createErrorState: T·∫°o tr·∫°ng th√°i l·ªói
  static createErrorState(message) {
    return `
      <div class="error-container">
        <i class="fas fa-exclamation-triangle" style="font-size: 3rem; margin-bottom: 20px;"></i>
        <h3 style="margin: 0 0 16px 0;">C√≥ l·ªói x·∫£y ra</h3>
        <p style="margin: 0 0 24px 0;">${message}</p>
        <div class="error-actions">
          <button onclick="window.productDetailManager.retryLoad()" class="error-btn primary">
            <i class="fas fa-refresh" style="margin-right: 8px;"></i>
            Th·ª≠ l·∫°i
          </button>
          <button onclick="history.back()" class="error-btn secondary">
            <i class="fas fa-arrow-left" style="margin-right: 8px;"></i>
            Quay l·∫°i
          </button>
        </div>
      </div>
    `;
  }

  // createSelectedVariantInfo: T·∫°o th√¥ng tin variant ƒë√£ ch·ªçn
  static createSelectedVariantInfo(bestMatch, selectedOptions, formatPriceFn) {
    return `
      <div class="selected-variant-grid">
        <div class="selected-variant-item">
          <span>Gi√°:</span>
          <span class="selected-variant-value" style="color: #007bff; font-size: 1.1rem;">
            ${formatPriceFn(bestMatch.price)}
          </span>
        </div>
        <div class="selected-variant-item">
          <span>T·ªìn kho:</span>
          <span class="selected-variant-value" style="color: ${bestMatch.quantity > 0 ? '#4caf50' : '#f44336'};">
            ${bestMatch.quantity} s·∫£n ph·∫©m
          </span>
        </div>
        <div class="selected-variant-item">
          <span>SKU:</span>
          <span class="selected-variant-value" style="color: #333; font-size: 0.9rem;">
            ${bestMatch.skuCode || 'N/A'}
          </span>
        </div>
      </div>
      <div class="selected-variant-tags">
        <span style="color: #666; font-size: 0.9rem;">L·ª±a ch·ªçn:</span>
        ${selectedOptions.map(([attr, data]) => `
          <span class="selected-variant-tag">${attr}: ${data.value}</span>
        `).join('')}
      </div>
    `;
  }
}

// Export cho global access
window.ProductDetailTemplates = ProductDetailTemplates;
