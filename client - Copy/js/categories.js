
// ========================================
// CATEGORY MENU LOADER - T·ªëi ∆∞u h√≥a
// ========================================

class CategoryManager {
  constructor() {
    this.apiUrl = "http://localhost:8000/product/categories/tree";
    // Kh√¥ng s·ª≠ d·ª•ng fallback categories ƒë·ªÉ tr√°nh hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u
  }

  // loadCategories: T·∫£i danh m·ª•c t·ª´ API - kh√¥ng d√πng d·ªØ li·ªáu m·∫´u
  async loadCategories() {
    try {
      console.log("üîó ƒêang g·ªçi API danh m·ª•c:", this.apiUrl);
      const res = await fetch(this.apiUrl);
      
      if (!res.ok) {
        throw new Error(`HTTP ${res.status} - ${res.statusText}`);
      }
      
      const data = await res.json();
      console.log("üìä D·ªØ li·ªáu API tr·∫£ v·ªÅ:", data);
      
      // Ki·ªÉm tra c·∫•u tr√∫c response
      let categories = [];
      if (Array.isArray(data.result)) {
        categories = data.result;
        console.log("‚úÖ T√¨m th·∫•y categories trong data.result");
      } else if (Array.isArray(data.data)) {
        categories = data.data;
        console.log("‚úÖ T√¨m th·∫•y categories trong data.data");
      } else if (Array.isArray(data)) {
        categories = data;
        console.log("‚úÖ T√¨m th·∫•y categories trong data");
      } else {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y categories trong response");
      }
      
      console.log(`üìã T·ªïng s·ªë danh m·ª•c: ${categories.length}`);
      return categories;
      
    } catch (error) {
      console.log(`‚ö†Ô∏è L·ªói khi g·ªçi API danh m·ª•c: ${error.message}`);
      return [];
    }
  }

  // createCategoryItem: T·∫°o item danh m·ª•c v·ªõi event click
  createCategoryItem(category, isSubCategory = false) {
    const li = document.createElement("li");
    const link = document.createElement("a");
    
    link.href = "#";
    link.textContent = category.name;
    link.className = isSubCategory ? "sub-category-item" : "category-parent";
    link.setAttribute('data-category-id', category.id);
    
    // Ki·ªÉm tra xem category c√≥ s·∫£n ph·∫©m kh√¥ng
    const hasProducts = this.categoryHasProducts(category);
    
    if (!hasProducts) {
      link.style.opacity = '0.5';
      link.style.cursor = 'not-allowed';
      link.title = 'Danh m·ª•c n√†y ch∆∞a c√≥ s·∫£n ph·∫©m';
      // Kh√¥ng th√™m click handler cho category r·ªóng
    } else {
      link.onclick = (e) => {
        e.preventDefault();
        this.navigateToCategory(category.id, category.name);
      };
    }
    
    li.appendChild(link);
    return li;
  }

  // categoryHasProducts: Ki·ªÉm tra category c√≥ s·∫£n ph·∫©m kh√¥ng
  categoryHasProducts(category) {
    // ƒê∆°n gi·∫£n h√≥a: cho ph√©p click t·∫•t c·∫£ categories ƒë·ªÉ test API
    // API s·∫Ω tr·∫£ v·ªÅ empty n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m
    return true;
  }

  // buildMenu: X√¢y d·ª±ng menu t·ª´ danh s√°ch categories
  buildMenu(categories) {
    const menu = document.getElementById("categoryMenu");
    if (!menu) {
      return;
    }
    
    menu.innerHTML = "";
    
    // N·∫øu kh√¥ng c√≥ categories, hi·ªÉn th·ªã th√¥ng b√°o l·ªói API
    if (!categories || categories.length === 0) {
      const noDataItem = document.createElement("li");
      noDataItem.innerHTML = `
        <a href="#" style="color: #dc3545; font-style: italic;">
          <i class="fas fa-wifi" style="margin-right: 8px;"></i>
          Kh√¥ng th·ªÉ k·∫øt n·ªëi API danh m·ª•c
        </a>
      `;
      menu.appendChild(noDataItem);
      return;
    }
    
    categories.forEach(parent => {
      const parentLi = this.createCategoryItem(parent);
      
      // Th√™m subcategories n·∫øu c√≥
      if (parent.children?.length > 0) {
        const subMenu = document.createElement("ul");
        subMenu.className = "sub-category-menu";
        
        parent.children.forEach(child => {
          const childLi = this.createCategoryItem(child, true);
          subMenu.appendChild(childLi);
        });
        
        parentLi.appendChild(subMenu);
      }
      
      menu.appendChild(parentLi);
    });
  }

  // navigateToCategory: ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang s·∫£n ph·∫©m theo danh m·ª•c
  navigateToCategory(categoryId, categoryName) {
    // ƒê∆°n gi·∫£n h√≥a URL, kh√¥ng c·∫ßn useNewAPI flag
    const url = `products.html?categoryId=${categoryId}&categoryName=${encodeURIComponent(categoryName)}`;
    window.location.href = url;
  }

  // init: Kh·ªüi t·∫°o category menu
  async init() {
    console.log("üöÄ B·∫Øt ƒë·∫ßu t·∫£i danh m·ª•c...");
    const categories = await this.loadCategories();
    this.buildMenu(categories);
    
    // Log k·∫øt qu·∫£
    if (categories.length > 0) {
      console.log(`‚úÖ ƒê√£ t·∫£i ${categories.length} danh m·ª•c t·ª´ API th√†nh c√¥ng`);
    } else {
      console.log(`‚ùå Kh√¥ng c√≥ danh m·ª•c t·ª´ API - ki·ªÉm tra console ƒë·ªÉ debug`);
    }
  }
}

// Kh·ªüi t·∫°o khi DOM ready
window.addEventListener("DOMContentLoaded", () => {
  const categoryManager = new CategoryManager();
  categoryManager.init();
});

// Export cho global access
window.navigateToNewProductAPI = (categoryId, categoryName) => {
  const categoryManager = new CategoryManager();
  categoryManager.navigateToCategory(categoryId, categoryName);
};